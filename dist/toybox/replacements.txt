void bc_main(void)
toys.exitval = (int) st;
bc_program_init(&vm->prog, len);
bc_parse_init(&vm->prs, &vm->prog, BC_PROG_MAIN);
st = bc_vm_init(&vm);
s = bc_vm_stdin(vm);
toys.optflags
toys.optflags
toys.optc
toys.optargs[i]
exit:\n  if (CFG_TOYBOX_FREE) bc_vm_free(&vm);
bc_parse_parse(&vm
bc_parse_parse(&vm
((s = bc_parse_init(&vm.prs, &vm.prog)))
size_t len = strlen(bc_sig_msg);
write(2, bc_sig_msg, len) == (ssize_t) len
bc_vm_info()
if ((i - 1 > len || string[i - 1] != '\\\\') && c == '"') str = !str;
'"'
'"'
BcStatus bc_vm_init(BcVm *vm)
("BC_LINE_LENGTH")
* (
FLAG_s
FLAG_q
FLAG_l
FLAG_i
maxof(
minof(
((size_t) -1)
 int
int
 1
 0
1
void bc_lex_init(BcLex *l)
bc_lex_token(l)
void bc_parse_init(BcParse *p, BcProgram *prog, size_t func) {\n
void bc_program_init(BcProgram *p, size_t line_len) {\n
bc_lex_init(&p->l);
bc_parse_init(
bc_parse_expr(&parse, BC_PARSE_NOREAD, bc_parse_next_read)
BcStatus bc_program_pushVar(BcProgram *p, char *code, size_t *bgn)
void bc_vm_info(void)
(toys.optflags & FLAG_s)
(toys.optflags & FLAG_w)
TT.
toys.which->name
s = bc_parse_parse(p)
xmalloc
xrealloc
xstrdup
